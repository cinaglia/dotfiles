# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git recent) &&
  branch=$(echo "$branches" | fzf-tmux --ansi --reverse --no-sort) &&
  git checkout $(echo "$branch" | sed "s/^* //" | awk '{print $1}' | sed "s/.* //")
}

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
      --bind "ctrl-m:execute:
                echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R'"
}

# fcs - get git commit sha
fcs() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" \
    | fzf-tmux --ansi --no-sort --tiebreak=index --reverse \
    | grep -o '[a-f0-9]\{7\}'
}

# rebase from sha
rcs() {
  commit=`fcs`
  [ -n "$commit" ] && git rebase -i $commit || echo "No commit selected"
}

# ctrl-d: show diff against HEAD
# ctrl-b: apply stash
fstash() {
  local out q k sha
    while out=$(
      git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
      fzf-tmux --ansi --no-sort --query="$q" --print-query \
          --expect=ctrl-d,ctrl-b);
    do
      q=$(head -1 <<< "$out")
      k=$(head -2 <<< "$out" | tail -1)
      sha=$(tail -1 <<< "$out" | cut -d' ' -f1)
      [ -z "$sha" ] && continue
      if [ "$k" = 'ctrl-d' ]; then
        git diff $sha
      elif [ "$k" = 'ctrl-b' ]; then
        git stash apply $sha
        break;
      else
        git stash show -p $sha --color=always | less -R
      fi
    done
}

# git add files
ga() {
  git add $(git ls-files -m | fzf -m);
}
